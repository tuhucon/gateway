package tensorflow.eager;

import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 * <pre>
 *&#47;/////////////////////////////////////////////////////////////////////////////
 * Eager Service defines a TensorFlow service that executes operations eagerly
 * on a set of local devices, on behalf of a remote Eager executor.
 * The service impl will keep track of the various clients and devices it has
 * access to and allows the client to enqueue ops on any devices that it is able
 * to access and schedule data transfers from/to any of the peers.
 * A client can generate multiple contexts to be able to independently execute
 * operations, but cannot share data between the two contexts.
 * NOTE: Even though contexts generated by clients should be independent, the
 * lower level tensorflow execution engine is not, so they might share some data
 * (e.g. a Device's ResourceMgr).
 * //////////////////////////////////////////////////////////////////////////////
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.21.0)",
    comments = "Source: tensorflow/core/protobuf/eager_service.proto")
public final class EagerServiceGrpc {

  private EagerServiceGrpc() {}

  public static final String SERVICE_NAME = "tensorflow.eager.EagerService";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CreateContextRequest,
      tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> getCreateContextMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateContext",
      requestType = tensorflow.eager.EagerServiceOuterClass.CreateContextRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.CreateContextResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CreateContextRequest,
      tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> getCreateContextMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CreateContextRequest, tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> getCreateContextMethod;
    if ((getCreateContextMethod = EagerServiceGrpc.getCreateContextMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getCreateContextMethod = EagerServiceGrpc.getCreateContextMethod) == null) {
          EagerServiceGrpc.getCreateContextMethod = getCreateContextMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.CreateContextRequest, tensorflow.eager.EagerServiceOuterClass.CreateContextResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "CreateContext"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.CreateContextRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.CreateContextResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("CreateContext"))
                  .build();
          }
        }
     }
     return getCreateContextMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.EnqueueRequest,
      tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> getEnqueueMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "Enqueue",
      requestType = tensorflow.eager.EagerServiceOuterClass.EnqueueRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.EnqueueResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.EnqueueRequest,
      tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> getEnqueueMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.EnqueueRequest, tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> getEnqueueMethod;
    if ((getEnqueueMethod = EagerServiceGrpc.getEnqueueMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getEnqueueMethod = EagerServiceGrpc.getEnqueueMethod) == null) {
          EagerServiceGrpc.getEnqueueMethod = getEnqueueMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.EnqueueRequest, tensorflow.eager.EagerServiceOuterClass.EnqueueResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "Enqueue"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.EnqueueRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.EnqueueResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("Enqueue"))
                  .build();
          }
        }
     }
     return getEnqueueMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest,
      tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> getWaitQueueDoneMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "WaitQueueDone",
      requestType = tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest,
      tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> getWaitQueueDoneMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest, tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> getWaitQueueDoneMethod;
    if ((getWaitQueueDoneMethod = EagerServiceGrpc.getWaitQueueDoneMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getWaitQueueDoneMethod = EagerServiceGrpc.getWaitQueueDoneMethod) == null) {
          EagerServiceGrpc.getWaitQueueDoneMethod = getWaitQueueDoneMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest, tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "WaitQueueDone"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("WaitQueueDone"))
                  .build();
          }
        }
     }
     return getWaitQueueDoneMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest,
      tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> getKeepAliveMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "KeepAlive",
      requestType = tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest,
      tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> getKeepAliveMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest, tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> getKeepAliveMethod;
    if ((getKeepAliveMethod = EagerServiceGrpc.getKeepAliveMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getKeepAliveMethod = EagerServiceGrpc.getKeepAliveMethod) == null) {
          EagerServiceGrpc.getKeepAliveMethod = getKeepAliveMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest, tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "KeepAlive"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("KeepAlive"))
                  .build();
          }
        }
     }
     return getKeepAliveMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CloseContextRequest,
      tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> getCloseContextMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CloseContext",
      requestType = tensorflow.eager.EagerServiceOuterClass.CloseContextRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.CloseContextResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CloseContextRequest,
      tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> getCloseContextMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.CloseContextRequest, tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> getCloseContextMethod;
    if ((getCloseContextMethod = EagerServiceGrpc.getCloseContextMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getCloseContextMethod = EagerServiceGrpc.getCloseContextMethod) == null) {
          EagerServiceGrpc.getCloseContextMethod = getCloseContextMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.CloseContextRequest, tensorflow.eager.EagerServiceOuterClass.CloseContextResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "CloseContext"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.CloseContextRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.CloseContextResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("CloseContext"))
                  .build();
          }
        }
     }
     return getCloseContextMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest,
      tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> getRegisterFunctionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "RegisterFunction",
      requestType = tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest,
      tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> getRegisterFunctionMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest, tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> getRegisterFunctionMethod;
    if ((getRegisterFunctionMethod = EagerServiceGrpc.getRegisterFunctionMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getRegisterFunctionMethod = EagerServiceGrpc.getRegisterFunctionMethod) == null) {
          EagerServiceGrpc.getRegisterFunctionMethod = getRegisterFunctionMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest, tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "RegisterFunction"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("RegisterFunction"))
                  .build();
          }
        }
     }
     return getRegisterFunctionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.SendTensorRequest,
      tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> getSendTensorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SendTensor",
      requestType = tensorflow.eager.EagerServiceOuterClass.SendTensorRequest.class,
      responseType = tensorflow.eager.EagerServiceOuterClass.SendTensorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.SendTensorRequest,
      tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> getSendTensorMethod() {
    io.grpc.MethodDescriptor<tensorflow.eager.EagerServiceOuterClass.SendTensorRequest, tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> getSendTensorMethod;
    if ((getSendTensorMethod = EagerServiceGrpc.getSendTensorMethod) == null) {
      synchronized (EagerServiceGrpc.class) {
        if ((getSendTensorMethod = EagerServiceGrpc.getSendTensorMethod) == null) {
          EagerServiceGrpc.getSendTensorMethod = getSendTensorMethod = 
              io.grpc.MethodDescriptor.<tensorflow.eager.EagerServiceOuterClass.SendTensorRequest, tensorflow.eager.EagerServiceOuterClass.SendTensorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "tensorflow.eager.EagerService", "SendTensor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.SendTensorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  tensorflow.eager.EagerServiceOuterClass.SendTensorResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new EagerServiceMethodDescriptorSupplier("SendTensor"))
                  .build();
          }
        }
     }
     return getSendTensorMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static EagerServiceStub newStub(io.grpc.Channel channel) {
    return new EagerServiceStub(channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static EagerServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new EagerServiceBlockingStub(channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static EagerServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new EagerServiceFutureStub(channel);
  }

  /**
   * <pre>
   *&#47;/////////////////////////////////////////////////////////////////////////////
   * Eager Service defines a TensorFlow service that executes operations eagerly
   * on a set of local devices, on behalf of a remote Eager executor.
   * The service impl will keep track of the various clients and devices it has
   * access to and allows the client to enqueue ops on any devices that it is able
   * to access and schedule data transfers from/to any of the peers.
   * A client can generate multiple contexts to be able to independently execute
   * operations, but cannot share data between the two contexts.
   * NOTE: Even though contexts generated by clients should be independent, the
   * lower level tensorflow execution engine is not, so they might share some data
   * (e.g. a Device's ResourceMgr).
   * //////////////////////////////////////////////////////////////////////////////
   * </pre>
   */
  public static abstract class EagerServiceImplBase implements io.grpc.BindableService {

    /**
     * <pre>
     * This initializes the worker, informing it about the other workers in the
     * cluster and exchanging authentication tokens which will be used in all
     * other RPCs to detect whether the worker has restarted.
     * </pre>
     */
    public void createContext(tensorflow.eager.EagerServiceOuterClass.CreateContextRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getCreateContextMethod(), responseObserver);
    }

    /**
     * <pre>
     * This takes a list of Execute and DeleteTensorHandle operations and enqueues
     * (in async mode) or executes (in sync mode) them on the remote server.
     * All outputs of ops which were not explicitly deleted with
     * DeleteTensorHandle entries will be assumed to be alive and are usable by
     * future calls to Enqueue.
     * </pre>
     */
    public void enqueue(tensorflow.eager.EagerServiceOuterClass.EnqueueRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getEnqueueMethod(), responseObserver);
    }

    /**
     * <pre>
     * Takes a set of op IDs and waits until those ops are done. Returns any error
     * in the stream so far.
     * </pre>
     */
    public void waitQueueDone(tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getWaitQueueDoneMethod(), responseObserver);
    }

    /**
     * <pre>
     * Contexts are always created with a deadline and no RPCs within a deadline
     * will trigger a context garbage collection. KeepAlive calls can be used to
     * delay this.
     * </pre>
     */
    public void keepAlive(tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getKeepAliveMethod(), responseObserver);
    }

    /**
     * <pre>
     * Closes the context. No calls to other methods using the existing context ID
     * are valid after this.
     * </pre>
     */
    public void closeContext(tensorflow.eager.EagerServiceOuterClass.CloseContextRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getCloseContextMethod(), responseObserver);
    }

    /**
     * <pre>
     * Takes a FunctionDef and makes it enqueable on the remote worker.
     * </pre>
     */
    public void registerFunction(tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getRegisterFunctionMethod(), responseObserver);
    }

    /**
     * <pre>
     * An RPC to push tensors to the server. At times, certain environments don't
     * allow the server to connect back to the client.
     * </pre>
     */
    public void sendTensor(tensorflow.eager.EagerServiceOuterClass.SendTensorRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getSendTensorMethod(), responseObserver);
    }

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getCreateContextMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.CreateContextRequest,
                tensorflow.eager.EagerServiceOuterClass.CreateContextResponse>(
                  this, METHODID_CREATE_CONTEXT)))
          .addMethod(
            getEnqueueMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.EnqueueRequest,
                tensorflow.eager.EagerServiceOuterClass.EnqueueResponse>(
                  this, METHODID_ENQUEUE)))
          .addMethod(
            getWaitQueueDoneMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest,
                tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse>(
                  this, METHODID_WAIT_QUEUE_DONE)))
          .addMethod(
            getKeepAliveMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest,
                tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse>(
                  this, METHODID_KEEP_ALIVE)))
          .addMethod(
            getCloseContextMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.CloseContextRequest,
                tensorflow.eager.EagerServiceOuterClass.CloseContextResponse>(
                  this, METHODID_CLOSE_CONTEXT)))
          .addMethod(
            getRegisterFunctionMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest,
                tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse>(
                  this, METHODID_REGISTER_FUNCTION)))
          .addMethod(
            getSendTensorMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                tensorflow.eager.EagerServiceOuterClass.SendTensorRequest,
                tensorflow.eager.EagerServiceOuterClass.SendTensorResponse>(
                  this, METHODID_SEND_TENSOR)))
          .build();
    }
  }

  /**
   * <pre>
   *&#47;/////////////////////////////////////////////////////////////////////////////
   * Eager Service defines a TensorFlow service that executes operations eagerly
   * on a set of local devices, on behalf of a remote Eager executor.
   * The service impl will keep track of the various clients and devices it has
   * access to and allows the client to enqueue ops on any devices that it is able
   * to access and schedule data transfers from/to any of the peers.
   * A client can generate multiple contexts to be able to independently execute
   * operations, but cannot share data between the two contexts.
   * NOTE: Even though contexts generated by clients should be independent, the
   * lower level tensorflow execution engine is not, so they might share some data
   * (e.g. a Device's ResourceMgr).
   * //////////////////////////////////////////////////////////////////////////////
   * </pre>
   */
  public static final class EagerServiceStub extends io.grpc.stub.AbstractStub<EagerServiceStub> {
    private EagerServiceStub(io.grpc.Channel channel) {
      super(channel);
    }

    private EagerServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected EagerServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new EagerServiceStub(channel, callOptions);
    }

    /**
     * <pre>
     * This initializes the worker, informing it about the other workers in the
     * cluster and exchanging authentication tokens which will be used in all
     * other RPCs to detect whether the worker has restarted.
     * </pre>
     */
    public void createContext(tensorflow.eager.EagerServiceOuterClass.CreateContextRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getCreateContextMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * This takes a list of Execute and DeleteTensorHandle operations and enqueues
     * (in async mode) or executes (in sync mode) them on the remote server.
     * All outputs of ops which were not explicitly deleted with
     * DeleteTensorHandle entries will be assumed to be alive and are usable by
     * future calls to Enqueue.
     * </pre>
     */
    public void enqueue(tensorflow.eager.EagerServiceOuterClass.EnqueueRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getEnqueueMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Takes a set of op IDs and waits until those ops are done. Returns any error
     * in the stream so far.
     * </pre>
     */
    public void waitQueueDone(tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getWaitQueueDoneMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Contexts are always created with a deadline and no RPCs within a deadline
     * will trigger a context garbage collection. KeepAlive calls can be used to
     * delay this.
     * </pre>
     */
    public void keepAlive(tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getKeepAliveMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Closes the context. No calls to other methods using the existing context ID
     * are valid after this.
     * </pre>
     */
    public void closeContext(tensorflow.eager.EagerServiceOuterClass.CloseContextRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getCloseContextMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Takes a FunctionDef and makes it enqueable on the remote worker.
     * </pre>
     */
    public void registerFunction(tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getRegisterFunctionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * An RPC to push tensors to the server. At times, certain environments don't
     * allow the server to connect back to the client.
     * </pre>
     */
    public void sendTensor(tensorflow.eager.EagerServiceOuterClass.SendTensorRequest request,
        io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getSendTensorMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * <pre>
   *&#47;/////////////////////////////////////////////////////////////////////////////
   * Eager Service defines a TensorFlow service that executes operations eagerly
   * on a set of local devices, on behalf of a remote Eager executor.
   * The service impl will keep track of the various clients and devices it has
   * access to and allows the client to enqueue ops on any devices that it is able
   * to access and schedule data transfers from/to any of the peers.
   * A client can generate multiple contexts to be able to independently execute
   * operations, but cannot share data between the two contexts.
   * NOTE: Even though contexts generated by clients should be independent, the
   * lower level tensorflow execution engine is not, so they might share some data
   * (e.g. a Device's ResourceMgr).
   * //////////////////////////////////////////////////////////////////////////////
   * </pre>
   */
  public static final class EagerServiceBlockingStub extends io.grpc.stub.AbstractStub<EagerServiceBlockingStub> {
    private EagerServiceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }

    private EagerServiceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected EagerServiceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new EagerServiceBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     * This initializes the worker, informing it about the other workers in the
     * cluster and exchanging authentication tokens which will be used in all
     * other RPCs to detect whether the worker has restarted.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.CreateContextResponse createContext(tensorflow.eager.EagerServiceOuterClass.CreateContextRequest request) {
      return blockingUnaryCall(
          getChannel(), getCreateContextMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * This takes a list of Execute and DeleteTensorHandle operations and enqueues
     * (in async mode) or executes (in sync mode) them on the remote server.
     * All outputs of ops which were not explicitly deleted with
     * DeleteTensorHandle entries will be assumed to be alive and are usable by
     * future calls to Enqueue.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.EnqueueResponse enqueue(tensorflow.eager.EagerServiceOuterClass.EnqueueRequest request) {
      return blockingUnaryCall(
          getChannel(), getEnqueueMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Takes a set of op IDs and waits until those ops are done. Returns any error
     * in the stream so far.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse waitQueueDone(tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest request) {
      return blockingUnaryCall(
          getChannel(), getWaitQueueDoneMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Contexts are always created with a deadline and no RPCs within a deadline
     * will trigger a context garbage collection. KeepAlive calls can be used to
     * delay this.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse keepAlive(tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest request) {
      return blockingUnaryCall(
          getChannel(), getKeepAliveMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Closes the context. No calls to other methods using the existing context ID
     * are valid after this.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.CloseContextResponse closeContext(tensorflow.eager.EagerServiceOuterClass.CloseContextRequest request) {
      return blockingUnaryCall(
          getChannel(), getCloseContextMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Takes a FunctionDef and makes it enqueable on the remote worker.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse registerFunction(tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest request) {
      return blockingUnaryCall(
          getChannel(), getRegisterFunctionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * An RPC to push tensors to the server. At times, certain environments don't
     * allow the server to connect back to the client.
     * </pre>
     */
    public tensorflow.eager.EagerServiceOuterClass.SendTensorResponse sendTensor(tensorflow.eager.EagerServiceOuterClass.SendTensorRequest request) {
      return blockingUnaryCall(
          getChannel(), getSendTensorMethod(), getCallOptions(), request);
    }
  }

  /**
   * <pre>
   *&#47;/////////////////////////////////////////////////////////////////////////////
   * Eager Service defines a TensorFlow service that executes operations eagerly
   * on a set of local devices, on behalf of a remote Eager executor.
   * The service impl will keep track of the various clients and devices it has
   * access to and allows the client to enqueue ops on any devices that it is able
   * to access and schedule data transfers from/to any of the peers.
   * A client can generate multiple contexts to be able to independently execute
   * operations, but cannot share data between the two contexts.
   * NOTE: Even though contexts generated by clients should be independent, the
   * lower level tensorflow execution engine is not, so they might share some data
   * (e.g. a Device's ResourceMgr).
   * //////////////////////////////////////////////////////////////////////////////
   * </pre>
   */
  public static final class EagerServiceFutureStub extends io.grpc.stub.AbstractStub<EagerServiceFutureStub> {
    private EagerServiceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }

    private EagerServiceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected EagerServiceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new EagerServiceFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     * This initializes the worker, informing it about the other workers in the
     * cluster and exchanging authentication tokens which will be used in all
     * other RPCs to detect whether the worker has restarted.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.CreateContextResponse> createContext(
        tensorflow.eager.EagerServiceOuterClass.CreateContextRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getCreateContextMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * This takes a list of Execute and DeleteTensorHandle operations and enqueues
     * (in async mode) or executes (in sync mode) them on the remote server.
     * All outputs of ops which were not explicitly deleted with
     * DeleteTensorHandle entries will be assumed to be alive and are usable by
     * future calls to Enqueue.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.EnqueueResponse> enqueue(
        tensorflow.eager.EagerServiceOuterClass.EnqueueRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getEnqueueMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Takes a set of op IDs and waits until those ops are done. Returns any error
     * in the stream so far.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse> waitQueueDone(
        tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getWaitQueueDoneMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Contexts are always created with a deadline and no RPCs within a deadline
     * will trigger a context garbage collection. KeepAlive calls can be used to
     * delay this.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse> keepAlive(
        tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getKeepAliveMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Closes the context. No calls to other methods using the existing context ID
     * are valid after this.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.CloseContextResponse> closeContext(
        tensorflow.eager.EagerServiceOuterClass.CloseContextRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getCloseContextMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Takes a FunctionDef and makes it enqueable on the remote worker.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse> registerFunction(
        tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getRegisterFunctionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * An RPC to push tensors to the server. At times, certain environments don't
     * allow the server to connect back to the client.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<tensorflow.eager.EagerServiceOuterClass.SendTensorResponse> sendTensor(
        tensorflow.eager.EagerServiceOuterClass.SendTensorRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getSendTensorMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_CREATE_CONTEXT = 0;
  private static final int METHODID_ENQUEUE = 1;
  private static final int METHODID_WAIT_QUEUE_DONE = 2;
  private static final int METHODID_KEEP_ALIVE = 3;
  private static final int METHODID_CLOSE_CONTEXT = 4;
  private static final int METHODID_REGISTER_FUNCTION = 5;
  private static final int METHODID_SEND_TENSOR = 6;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final EagerServiceImplBase serviceImpl;
    private final int methodId;

    MethodHandlers(EagerServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_CREATE_CONTEXT:
          serviceImpl.createContext((tensorflow.eager.EagerServiceOuterClass.CreateContextRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CreateContextResponse>) responseObserver);
          break;
        case METHODID_ENQUEUE:
          serviceImpl.enqueue((tensorflow.eager.EagerServiceOuterClass.EnqueueRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.EnqueueResponse>) responseObserver);
          break;
        case METHODID_WAIT_QUEUE_DONE:
          serviceImpl.waitQueueDone((tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.WaitQueueDoneResponse>) responseObserver);
          break;
        case METHODID_KEEP_ALIVE:
          serviceImpl.keepAlive((tensorflow.eager.EagerServiceOuterClass.KeepAliveRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.KeepAliveResponse>) responseObserver);
          break;
        case METHODID_CLOSE_CONTEXT:
          serviceImpl.closeContext((tensorflow.eager.EagerServiceOuterClass.CloseContextRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.CloseContextResponse>) responseObserver);
          break;
        case METHODID_REGISTER_FUNCTION:
          serviceImpl.registerFunction((tensorflow.eager.EagerServiceOuterClass.RegisterFunctionRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.RegisterFunctionResponse>) responseObserver);
          break;
        case METHODID_SEND_TENSOR:
          serviceImpl.sendTensor((tensorflow.eager.EagerServiceOuterClass.SendTensorRequest) request,
              (io.grpc.stub.StreamObserver<tensorflow.eager.EagerServiceOuterClass.SendTensorResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  private static abstract class EagerServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    EagerServiceBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return tensorflow.eager.EagerServiceOuterClass.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("EagerService");
    }
  }

  private static final class EagerServiceFileDescriptorSupplier
      extends EagerServiceBaseDescriptorSupplier {
    EagerServiceFileDescriptorSupplier() {}
  }

  private static final class EagerServiceMethodDescriptorSupplier
      extends EagerServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final String methodName;

    EagerServiceMethodDescriptorSupplier(String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (EagerServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new EagerServiceFileDescriptorSupplier())
              .addMethod(getCreateContextMethod())
              .addMethod(getEnqueueMethod())
              .addMethod(getWaitQueueDoneMethod())
              .addMethod(getKeepAliveMethod())
              .addMethod(getCloseContextMethod())
              .addMethod(getRegisterFunctionMethod())
              .addMethod(getSendTensorMethod())
              .build();
        }
      }
    }
    return result;
  }
}
